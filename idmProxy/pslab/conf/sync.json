{
    "mappings" : [
        {
            "name" : "onprem_user_to_fidc_alpha_user",
            "source" : "external/idm/65/managed/user",
            "target" : "external/idm/fidc/managed/alpha_user",
            "properties" : [
                {
                    "source" : "userName",
                    "target" : "userName"
                }
            ],
            "policies" : [
                {
                    "action" : "EXCEPTION",
                    "situation" : "AMBIGUOUS"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "SOURCE_MISSING"
                },
                {
                    "action" : "UNLINK",
                    "situation" : "MISSING"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "FOUND_ALREADY_LINKED"
                },
                {
                    "action" : "DELETE",
                    "situation" : "UNQUALIFIED"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "UNASSIGNED"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "LINK_ONLY"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "TARGET_IGNORED"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "SOURCE_IGNORED"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "ALL_GONE"
                },
                {
                    "action" : "UPDATE",
                    "situation" : "CONFIRMED"
                },
                {
                    "action" : "UPDATE",
                    "situation" : "FOUND"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "ABSENT"
                }
            ],
            "correlationQuery" : [
                {
                    "linkQualifier" : "default",
                    "expressionTree" : {
                        "any" : [
                            "userName"
                        ]
                    },
                    "mapping" : "onprem_user_to_fidc_alpha_user",
                    "type" : "text/javascript",
                    "file" : "ui/correlateTreeToQueryFilter.js"
                }
            ]
        },
        {
            "name" : "onprem_asgn_to_fidc_alpha_asgn",
            "target" : "external/idm/fidc/managed/alpha_assignment",
            "source" : "external/idm/65/managed/assignment",
            "properties" : [
                {
                    "source" : "description",
                    "target" : "description"
                },
                {
                    "source" : "name",
                    "target" : "name"
                },
                {
                    "target" : "mapping",
                    "default" : "managedAlpha_user_managedAlpha_user"
                },
                {
                    "target" : "attributes",
                    "transform" : {
                        "type" : "text/javascript",
                        "globals" : { },
                        "source" : "var attributes = [];\n\nattributes.push({\"assignmentOperation\":\"mergeWithTarget\", \"name\": \"frIndexedMultivalued2\",\"unassignmentOperation\": \"removeFromTarget\",\"value\": [source.name]})\n\nlogger.info(\"Asgn attributes: \" + attributes);\n\nattributes;"
                    },
                    "source" : ""
                }
            ],
            "policies" : [
                {
                    "action" : "EXCEPTION",
                    "situation" : "AMBIGUOUS"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "SOURCE_MISSING"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "MISSING"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "FOUND_ALREADY_LINKED"
                },
                {
                    "action" : "DELETE",
                    "situation" : "UNQUALIFIED"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "UNASSIGNED"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "LINK_ONLY"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "TARGET_IGNORED"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "SOURCE_IGNORED"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "ALL_GONE"
                },
                {
                    "action" : "UPDATE",
                    "situation" : "CONFIRMED"
                },
                {
                    "action" : "UPDATE",
                    "situation" : "FOUND"
                },
                {
                    "action" : "CREATE",
                    "situation" : "ABSENT"
                }
            ],
            "correlationQuery" : [
                {
                    "linkQualifier" : "default",
                    "expressionTree" : {
                        "any" : [
                            "name"
                        ]
                    },
                    "mapping" : "onprem_asgn_to_fidc_alpha_asgn",
                    "type" : "text/javascript",
                    "file" : "ui/correlateTreeToQueryFilter.js"
                }
            ]
        },
        {
            "name" : "onprem_role_to_fidc_alpha_role",
            "target" : "external/idm/fidc/managed/alpha_role",
            "source" : "external/idm/65/managed/role",
            "sourceQuery" : {
                "_queryFilter" : true,
                "_fields" : "*,*_ref"
            },
            "properties" : [
                {
                    "source" : "description",
                    "target" : "description"
                },
                {
                    "source" : "name",
                    "target" : "name"
                },
                {
                    "target" : "assignments",
                    "transform" : {
                        "type" : "text/javascript",
                        "globals" : { },
                        "source" : "logger.info(\"Creating Roles<->Assignments relationships for role: \" + source.name + \" ,source Assignments: \" + source.assignments);\nvar assignmentRefs = [];\nvar assignmentRef;\nconst uniqueRefs = new Set();\n\nif (source.assignments != null) {\n  for (assignment of source.assignments) {\n    \n    // Retrieve _id from repo links\n    query = {'_queryFilter': 'linkType eq \\\"onprem_asgn_to_fidc_alpha_asgn\\\" AND firstId eq \\\"' + assignment._refResourceId + '\\\"'};  \n    logger.info(\"Assignments: query filter for Proxy repo: \" + query._queryFilter);\n\tvar queryResult = openidm.query(\"repo/link\", query);\n    \n    logger.info(\"Assignments: query results for role: \" + source.name + \" ,from Proxy Repo: \" + queryResult);\n                                                                 \n\tif (queryResult.resultCount >= 1) {\n        assignmentRef =  queryResult.result[0].secondId;  \n        \n        if (!uniqueRefs.has(assignmentRef)){\n                  assignmentRefs.push({\"_ref\": \"managed/alpha_assignment/\" + assignmentRef})\n                  uniqueRefs.add(assignmentRef)\n                  logger.info(\"Added assignment ref : \" + assignmentRef);\n        } else {\n          logger.info(\"Duplicate assignment ref found, ignoring: \" + assignmentRef);\n        }\n\t}\n  }  \n}\n  \nassignmentRefs;"
                    },
                    "source" : ""
                },
                {
                    "target" : "members",
                    "transform" : {
                        "type" : "text/javascript",
                        "globals" : { },
                        "source" : "logger.info(\"Creating Roles<->Members relationships for role: \" + source.name + \" ,source Members: \" + source.members);\n\nvar memberRefs = [];\nvar query, memberRef, userName;\nconst uniqueRefs = new Set();\n\nif (source.members != null) {\n  for (member of source.members) {\n    // Retrieve _id from repo links\n    query = {'_queryFilter': 'linkType eq \\\"onprem_user_to_fidc_alpha_user\\\" AND firstId eq \\\"' + member._refResourceId + '\\\"'};  \n    logger.info(\"Members: query filter for Proxy repo: \" + query._queryFilter);\n\tvar queryResult = openidm.query(\"repo/link\", query);\n    \n    logger.info(\"Members: query results for role: \" + source.name + \" ,from Proxy Repo: \" + queryResult);\n                                                                 \n\tif (queryResult.resultCount >= 1) {\n        memberRef = queryResult.result[0].secondId;  \n        if (!uniqueRefs.has(memberRef)){\n                  memberRefs.push({\"_ref\":\"managed/alpha_user/\" + memberRef})\n                  uniqueRefs.add(memberRef)\n                  logger.info(\"Added member ref : \" + memberRef);\n        } else {\n          logger.info(\"Duplicate member ref found, ignoring: \" + memberRef);\n        }\n\t}\n    \n  }  \n}\n\n\n\nmemberRefs;"
                    },
                    "source" : ""
                }
            ],
            "policies" : [
                {
                    "action" : "EXCEPTION",
                    "situation" : "AMBIGUOUS"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "SOURCE_MISSING"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "MISSING"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "FOUND_ALREADY_LINKED"
                },
                {
                    "action" : "DELETE",
                    "situation" : "UNQUALIFIED"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "UNASSIGNED"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "LINK_ONLY"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "TARGET_IGNORED"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "SOURCE_IGNORED"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "ALL_GONE"
                },
                {
                    "action" : "UPDATE",
                    "situation" : "CONFIRMED"
                },
                {
                    "action" : "UPDATE",
                    "situation" : "FOUND"
                },
                {
                    "action" : "CREATE",
                    "situation" : "ABSENT"
                }
            ],
            "correlationQuery" : [
                {
                    "linkQualifier" : "default",
                    "expressionTree" : {
                        "any" : [
                            "name"
                        ]
                    },
                    "mapping" : "onprem_role_to_fidc_alpha_role",
                    "type" : "text/javascript",
                    "file" : "ui/correlateTreeToQueryFilter.js"
                }
            ]
        }
    ]
}