{
    "mappings" : [
        {
            "name" : "onprem_user_to_fidc_alpha_user",
            "source" : "external/idm/65/managed/user",
            "target" : "external/idm/fidc/managed/alpha_user",
            "properties" : [
                {
                    "source" : "userName",
                    "target" : "userName"
                }
            ],
            "policies" : [
                {
                    "action" : "EXCEPTION",
                    "situation" : "AMBIGUOUS"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "SOURCE_MISSING"
                },
                {
                    "action" : "UNLINK",
                    "situation" : "MISSING"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "FOUND_ALREADY_LINKED"
                },
                {
                    "action" : "DELETE",
                    "situation" : "UNQUALIFIED"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "UNASSIGNED"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "LINK_ONLY"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "TARGET_IGNORED"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "SOURCE_IGNORED"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "ALL_GONE"
                },
                {
                    "action" : "UPDATE",
                    "situation" : "CONFIRMED"
                },
                {
                    "action" : "UPDATE",
                    "situation" : "FOUND"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "ABSENT"
                }
            ],
            "correlationQuery" : [
                {
                    "linkQualifier" : "default",
                    "expressionTree" : {
                        "any" : [
                            "userName"
                        ]
                    },
                    "mapping" : "onprem_user_to_fidc_alpha_user",
                    "type" : "text/javascript",
                    "file" : "ui/correlateTreeToQueryFilter.js"
                }
            ]
        },
        {
            "name" : "onprem_asgn_to_fidc_alpha_asgn",
            "target" : "external/idm/fidc/managed/alpha_assignment",
            "source" : "external/idm/65/managed/assignment",
            "properties" : [
                {
                    "source" : "description",
                    "target" : "description"
                },
                {
                    "source" : "name",
                    "target" : "name"
                },
                {
                    "target" : "mapping",
                    "default" : "managedAlpha_user_managedAlpha_user"
                }
            ],
            "policies" : [
                {
                    "action" : "EXCEPTION",
                    "situation" : "AMBIGUOUS"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "SOURCE_MISSING"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "MISSING"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "FOUND_ALREADY_LINKED"
                },
                {
                    "action" : "DELETE",
                    "situation" : "UNQUALIFIED"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "UNASSIGNED"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "LINK_ONLY"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "TARGET_IGNORED"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "SOURCE_IGNORED"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "ALL_GONE"
                },
                {
                    "action" : "UPDATE",
                    "situation" : "CONFIRMED"
                },
                {
                    "action" : "UPDATE",
                    "situation" : "FOUND"
                },
                {
                    "action" : "CREATE",
                    "situation" : "ABSENT"
                }
            ],
            "correlationQuery" : [
                {
                    "linkQualifier" : "default",
                    "expressionTree" : {
                        "any" : [
                            "name"
                        ]
                    },
                    "mapping" : "onprem_asgn_to_fidc_alpha_asgn",
                    "type" : "text/javascript",
                    "file" : "ui/correlateTreeToQueryFilter.js"
                }
            ]
        },
        {
            "name" : "onprem_role_to_fidc_alpha_role",
            "target" : "external/idm/fidc/managed/alpha_role",
            "source" : "external/idm/65/managed/role",
            "reconSourceQueryPaging" : true,
            "reconSourceQueryPageSize" : 10000,
            "clusteredSourceReconEnabled" : true,
            "properties" : [
                {
                    "source" : "description",
                    "target" : "description"
                },
                {
                    "source" : "name",
                    "target" : "name"
                }
            ],
            "policies" : [
                {
                    "action" : "EXCEPTION",
                    "situation" : "AMBIGUOUS"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "SOURCE_MISSING"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "MISSING"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "FOUND_ALREADY_LINKED"
                },
                {
                    "action" : "DELETE",
                    "situation" : "UNQUALIFIED"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "UNASSIGNED"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "LINK_ONLY"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "TARGET_IGNORED"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "SOURCE_IGNORED"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "ALL_GONE"
                },
                {
                    "action" : "UPDATE",
                    "situation" : "CONFIRMED"
                },
                {
                    "action" : "UPDATE",
                    "situation" : "FOUND"
                },
                {
                    "action" : "CREATE",
                    "situation" : "ABSENT"
                }
            ],
            "correlationQuery" : [
                {
                    "linkQualifier" : "default",
                    "expressionTree" : {
                        "any" : [
                            "name"
                        ]
                    },
                    "mapping" : "onprem_role_to_fidc_alpha_role",
                    "type" : "text/javascript",
                    "file" : "ui/correlateTreeToQueryFilter.js"
                }
            ],
            "onUpdate" : {
                "type" : "text/javascript",
                "globals" : { },
                "source" : "logger.info('Target role object: = {} ', target);"
            }
        },
        {
            "name" : "onprem_role_to_fidc_alpha_role_assignments",
            "target" : "external/idm/fidc/managed/alpha_role",
            "source" : "external/idm/65/managed/role",
            "sourceQuery" : {
                "_queryFilter" : true,
                "_fields" : "*,*_ref"
            },
            "reconSourceQueryPaging" : true,
            "reconSourceQueryPageSize" : 10000,
            "clusteredSourceReconEnabled" : true,
            "properties" : [
                {
                    "source" : "name",
                    "target" : "name"
                },
                {
                    "target" : "assignments",
                    "transform" : {
                        "type" : "text/javascript",
                        "globals" : { },
                        "source" : "logger.info(\"Creating Roles<->Assignments relationships for role: \" + source.name + \" ,source Assignments: \" + source.assignments);\nvar assignmentRefs = [];\nvar assignmentRef;\nconst uniqueRefs = new Set();\n\nif (source.assignments != null) {\n  for (assignment of source.assignments) {\n    \n    // Retrieve _id from repo links\n    query = {'_queryFilter': 'linkType eq \\\"onprem_asgn_to_fidc_alpha_asgn\\\" AND firstId eq \\\"' + assignment._refResourceId + '\\\"'};  \n    logger.info(\"Assignments: query filter for Proxy repo: \" + query._queryFilter);\n\tvar queryResult = openidm.query(\"repo/link\", query);\n    \n    logger.info(\"Assignments: query results for role: \" + source.name + \" ,from Proxy Repo: \" + queryResult);\n                                                                 \n\tif (queryResult.resultCount >= 1) {\n        assignmentRef =  queryResult.result[0].secondId;  \n        \n        if (!uniqueRefs.has(assignmentRef)){\n                  assignmentRefs.push({\"_ref\": \"managed/alpha_assignment/\" + assignmentRef})\n                  uniqueRefs.add(assignmentRef)\n                  logger.info(\"Added assignment ref : \" + assignmentRef);\n        } else {\n          logger.info(\"Duplicate assignment ref found, ignoring: \" + assignmentRef);\n        }\n\t}\n  }  \n}\n  \nassignmentRefs;"
                    },
                    "source" : ""
                }
            ],
            "policies" : [
                {
                    "action" : "EXCEPTION",
                    "situation" : "AMBIGUOUS"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "SOURCE_MISSING"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "MISSING"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "FOUND_ALREADY_LINKED"
                },
                {
                    "action" : "DELETE",
                    "situation" : "UNQUALIFIED"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "UNASSIGNED"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "LINK_ONLY"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "TARGET_IGNORED"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "SOURCE_IGNORED"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "ALL_GONE"
                },
                {
                    "action" : "UPDATE",
                    "situation" : "CONFIRMED"
                },
                {
                    "action" : "UPDATE",
                    "situation" : "FOUND"
                },
                {
                    "action" : "CREATE",
                    "situation" : "ABSENT"
                }
            ],
            "correlationQuery" : [
                {
                    "linkQualifier" : "default",
                    "expressionTree" : {
                        "any" : [
                            "name"
                        ]
                    },
                    "mapping" : "onprem_role_to_fidc_alpha_role_assignments",
                    "type" : "text/javascript",
                    "file" : "ui/correlateTreeToQueryFilter.js"
                }
            ],
            "onUpdate" : {
                "type" : "text/javascript",
                "globals" : { },
                "source" : "logger.info('Target role object with assignments: = {} ', target);"
            }
        },
        {
            "name" : "onprem_user_to_fidc_alpha_user_roles",
            "source" : "external/idm/65/managed/user",
            "target" : "external/idm/fidc/managed/alpha_user",
            "taskThreads" : 2,
            "targetQuery" : {
                "_queryFilter" : true,
                "_fields" : "*,*_ref"
            },
            "sourceQuery" : {
                "_queryFilter" : true,
                "_fields" : "*,*_ref"
            },
            "reconSourceQueryPaging" : true,
            "reconSourceQueryPageSize" : 10000,
            "clusteredSourceReconEnabled" : true,
            "properties" : [
                {
                    "target" : "userName",
                    "source" : "userName"
                }
            ],
            "policies" : [
                {
                    "action" : "EXCEPTION",
                    "situation" : "AMBIGUOUS"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "SOURCE_MISSING"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "MISSING"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "FOUND_ALREADY_LINKED"
                },
                {
                    "action" : "DELETE",
                    "situation" : "UNQUALIFIED"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "UNASSIGNED"
                },
                {
                    "action" : "EXCEPTION",
                    "situation" : "LINK_ONLY"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "TARGET_IGNORED"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "SOURCE_IGNORED"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "ALL_GONE"
                },
                {
                    "action" : {
                        "type" : "text/javascript",
                        "globals" : { },
                        "file" : "script/user-role-confirmed.js"
                    },
                    "situation" : "CONFIRMED"
                },
                {
                    "action" : {
                        "type" : "text/javascript",
                        "globals" : { },
                        "source" : "logger.info(\"Creating Users<->Roles relationships for user: \" + source.userName + \" ,source Roles: \" + source.roles);\n\nvar rolesRefs = [];\nvar query, rolesRef, userName;\nconst uniqueRefs = new Set();\n\nif (source.roles != null) {\n  for (role of source.roles) {\n    // Retrieve _id from repo links\n    query = {'_queryFilter': 'linkType eq \\\"onprem_role_to_fidc_alpha_role\\\" AND firstId eq \\\"' + role._refResourceId + '\\\"'};  \n    logger.info(\"Roles: query filter for Proxy repo: \" + query._queryFilter);\n\tvar queryResult = openidm.query(\"repo/link\", query);\n    \n    logger.info(\"Roles: query results for user: \" + source.userName + \" ,from Proxy Repo: \" + queryResult);\n                                                                 \n\tif (queryResult.resultCount >= 1) {\n        rolesRef = queryResult.result[0].secondId;  \n        if (!uniqueRefs.has(rolesRef)){\n                  rolesRefs.push({\"_ref\":\"managed/alpha_role/\" + rolesRef})\n                  uniqueRefs.add(rolesRef)\n                  logger.info(\"Added role ref : \" + rolesRef);\n        } else {\n          logger.info(\"Duplicate role ref found, ignoring: \" + rolesRef);\n        }\n\t}\n    \n  }\n  \n  logger.info(\"Patching external IDM user: \" + target.userName + \" with roles: \" +  JSON.stringify(rolesRefs));\n  openidm.patch('external/idm/fidc/managed/alpha_user/' + target._id, null, [{\"operation\":\"replace\", \"field\":\"/roles\", \"value\":rolesRefs}]);\n\n}\n\n'LINK'"
                    },
                    "situation" : "FOUND"
                },
                {
                    "action" : "IGNORE",
                    "situation" : "ABSENT"
                }
            ],
            "correlationQuery" : [
                {
                    "linkQualifier" : "default",
                    "expressionTree" : {
                        "all" : [
                            "userName"
                        ]
                    },
                    "mapping" : "onprem_user_to_fidc_alpha_user_roles",
                    "type" : "text/javascript",
                    "file" : "ui/correlateTreeToQueryFilter.js"
                }
            ],
            "onUpdate" : {
                "type" : "text/javascript",
                "globals" : { },
                "source" : "logger.info('Target object : = {} ', target);"
            }
        }
    ]
}